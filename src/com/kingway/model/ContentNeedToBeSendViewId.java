package com.kingway.model;

// Generated 2010-11-28 21:08:00 by Hibernate Tools 3.3.0.GA

/**
 * ContentNeedToBeSendViewId generated by hbm2java
 */
public class ContentNeedToBeSendViewId implements java.io.Serializable {

	private String userModuleName;
	private long moduleId;
	private long userModuleId;
	private int contentType;
	private long userId;
	private long contentId;
	private Long subgroupId;
	private String groupName;
	private int alreadySendMessage;
	private int alreadySendMail;
	private int ignoreByUser;
	private Integer monitorType;

	public ContentNeedToBeSendViewId() {
	}

	public ContentNeedToBeSendViewId(String userModuleName, long moduleId,
			long userModuleId, int contentType, long userId, long contentId,
			String groupName, int alreadySendMessage, int alreadySendMail,
			int ignoreByUser) {
		this.userModuleName = userModuleName;
		this.moduleId = moduleId;
		this.userModuleId = userModuleId;
		this.contentType = contentType;
		this.userId = userId;
		this.contentId = contentId;
		this.groupName = groupName;
		this.alreadySendMessage = alreadySendMessage;
		this.alreadySendMail = alreadySendMail;
		this.ignoreByUser = ignoreByUser;
	}

	public ContentNeedToBeSendViewId(String userModuleName, long moduleId,
			long userModuleId, int contentType, long userId, long contentId,
			Long subgroupId, String groupName, int alreadySendMessage,
			int alreadySendMail, int ignoreByUser, Integer monitorType) {
		this.userModuleName = userModuleName;
		this.moduleId = moduleId;
		this.userModuleId = userModuleId;
		this.contentType = contentType;
		this.userId = userId;
		this.contentId = contentId;
		this.subgroupId = subgroupId;
		this.groupName = groupName;
		this.alreadySendMessage = alreadySendMessage;
		this.alreadySendMail = alreadySendMail;
		this.ignoreByUser = ignoreByUser;
		this.monitorType = monitorType;
	}

	public String getUserModuleName() {
		return this.userModuleName;
	}

	public void setUserModuleName(String userModuleName) {
		this.userModuleName = userModuleName;
	}

	public long getModuleId() {
		return this.moduleId;
	}

	public void setModuleId(long moduleId) {
		this.moduleId = moduleId;
	}

	public long getUserModuleId() {
		return this.userModuleId;
	}

	public void setUserModuleId(long userModuleId) {
		this.userModuleId = userModuleId;
	}

	public int getContentType() {
		return this.contentType;
	}

	public void setContentType(int contentType) {
		this.contentType = contentType;
	}

	public long getUserId() {
		return this.userId;
	}

	public void setUserId(long userId) {
		this.userId = userId;
	}

	public long getContentId() {
		return this.contentId;
	}

	public void setContentId(long contentId) {
		this.contentId = contentId;
	}

	public Long getSubgroupId() {
		return this.subgroupId;
	}

	public void setSubgroupId(Long subgroupId) {
		this.subgroupId = subgroupId;
	}

	public String getGroupName() {
		return this.groupName;
	}

	public void setGroupName(String groupName) {
		this.groupName = groupName;
	}

	public int getAlreadySendMessage() {
		return this.alreadySendMessage;
	}

	public void setAlreadySendMessage(int alreadySendMessage) {
		this.alreadySendMessage = alreadySendMessage;
	}

	public int getAlreadySendMail() {
		return this.alreadySendMail;
	}

	public void setAlreadySendMail(int alreadySendMail) {
		this.alreadySendMail = alreadySendMail;
	}

	public int getIgnoreByUser() {
		return this.ignoreByUser;
	}

	public void setIgnoreByUser(int ignoreByUser) {
		this.ignoreByUser = ignoreByUser;
	}

	public Integer getMonitorType() {
		return this.monitorType;
	}

	public void setMonitorType(Integer monitorType) {
		this.monitorType = monitorType;
	}

	public boolean equals(Object other) {
		if ((this == other))
			return true;
		if ((other == null))
			return false;
		if (!(other instanceof ContentNeedToBeSendViewId))
			return false;
		ContentNeedToBeSendViewId castOther = (ContentNeedToBeSendViewId) other;

		return ((this.getUserModuleName() == castOther.getUserModuleName()) || (this
				.getUserModuleName() != null
				&& castOther.getUserModuleName() != null && this
				.getUserModuleName().equals(castOther.getUserModuleName())))
				&& (this.getModuleId() == castOther.getModuleId())
				&& (this.getUserModuleId() == castOther.getUserModuleId())
				&& (this.getContentType() == castOther.getContentType())
				&& (this.getUserId() == castOther.getUserId())
				&& (this.getContentId() == castOther.getContentId())
				&& ((this.getSubgroupId() == castOther.getSubgroupId()) || (this
						.getSubgroupId() != null
						&& castOther.getSubgroupId() != null && this
						.getSubgroupId().equals(castOther.getSubgroupId())))
				&& ((this.getGroupName() == castOther.getGroupName()) || (this
						.getGroupName() != null
						&& castOther.getGroupName() != null && this
						.getGroupName().equals(castOther.getGroupName())))
				&& (this.getAlreadySendMessage() == castOther
						.getAlreadySendMessage())
				&& (this.getAlreadySendMail() == castOther.getAlreadySendMail())
				&& (this.getIgnoreByUser() == castOther.getIgnoreByUser())
				&& ((this.getMonitorType() == castOther.getMonitorType()) || (this
						.getMonitorType() != null
						&& castOther.getMonitorType() != null && this
						.getMonitorType().equals(castOther.getMonitorType())));
	}

	public int hashCode() {
		int result = 17;

		result = 37
				* result
				+ (getUserModuleName() == null ? 0 : this.getUserModuleName()
						.hashCode());
		result = 37 * result + (int) this.getModuleId();
		result = 37 * result + (int) this.getUserModuleId();
		result = 37 * result + this.getContentType();
		result = 37 * result + (int) this.getUserId();
		result = 37 * result + (int) this.getContentId();
		result = 37
				* result
				+ (getSubgroupId() == null ? 0 : this.getSubgroupId()
						.hashCode());
		result = 37 * result
				+ (getGroupName() == null ? 0 : this.getGroupName().hashCode());
		result = 37 * result + this.getAlreadySendMessage();
		result = 37 * result + this.getAlreadySendMail();
		result = 37 * result + this.getIgnoreByUser();
		result = 37
				* result
				+ (getMonitorType() == null ? 0 : this.getMonitorType()
						.hashCode());
		return result;
	}

}
